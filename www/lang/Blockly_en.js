'use strict';
goog.provide ( 'Blockly.Msg.fr');
goog.require ( 'Blockly.Msg');

Blockly.Msg.INOUT_HIGH_LEVEL = "1 (high state)";
Blockly.Msg.INOUT_LOW_LEVEL = "0 (low state)";
Blockly.Msg.ARD_TYPE_CHAR = "character";
Blockly.Msg.ARD_TYPE_TEXT = "text";
Blockly.Msg.ARD_TYPE_BOOL = "binary";
Blockly.Msg.ARD_TYPE_SHORT = "byte";
Blockly.Msg.ARD_TYPE_NUMBER = "integer";
Blockly.Msg.ARD_TYPE_LONG = "long integer";
Blockly.Msg.ARD_TYPE_DECIMAL = "floating point number";
Blockly.Msg.ARD_TYPE_ARRAY = "Table";
Blockly.Msg.ARD_TYPE_NULL = "empty";
Blockly.Msg.ARD_TYPE_UNDEF = "not defined";
Blockly.Msg.ARD_TYPE_VOLATILE = "volatile integer";
Blockly.Msg.ARD_TYPE_CHILDBLOCKMISSING = "typing missing on a block";
Blockly.Msg.ARDUINO_BETWEEN = "random number between";
Blockly.Msg.ARDUINO_BETWEEN_AND = "and";
Blockly.Msg.ARDUINO_VAR_DECLARE = ​​"states";
Blockly.Msg.ARDUINO_VAR_AS = "as";
Blockly.Msg.ARDUINO_VAR_VAL = "of value";
Blockly.Msg.base_def_const = "set";
Blockly.Msg.base_define_const = "which is equivalent to";
Blockly.Msg.base_define_const_tooltip = "allows the programmer to give a name to any value";
Blockly.Msg.type = "set a value as the selected type";
Blockly.Msg.ADD_COMMENT = "Add a comment";
Blockly.Msg.CHANGE_VALUE_TITLE = "Change value:";
Blockly.Msg.CLEAN_UP = "Clean Blocks";
Blockly.Msg.COLLAPSE_ALL = "Reduce Blocks";
Blockly.Msg.COLLAPSE_BLOCK = "Reduce Block";
Blockly.Msg.CONTROLS_SWITCH_VAR_TITLE = "following that";
Blockly.Msg.CONTROLS_SWITCH_MSG_DEFAULT = "default";
Blockly.Msg.CONTROLS_SWITCH_MSG_CASEBREAK = "is";
Blockly.Msg.CONTROLS_SWITCH_MSG_SWITCHVAR = "if the variable is valid";
Blockly.Msg.CONTROLS_SWITCH_MSG_DO = "do";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP_1 = "If a value is true then execute the following commands";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP_2 = "If a value is true then execute the first block of commands, otherwise execute the next block of commands";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP_3 = "If a value is true then execute the first block of commands, otherwise execute the next block of commands if the condition is true";
Blockly.Msg.CONTROLS_SWITCH_TOOLTIP_4 = "If a value is true then execute the first block of commands, else execute the next block of commands if the condition is true.If no condition is satisfied, then make the default command block." ;
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "exit the loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "move to the next iteration";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Exit this loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block must be used in a loop";
Blockly.Msg.CONTROLS_FOREACH_TITLE = "for each item% 1 in list% 2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, assign the value of the item to variable% 1, and then execute statements";
Blockly.Msg.CONTROLS_FOR_TITLE = "for% 1 ranging from% 2 to% 3 in steps of% 4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Set variable% 1 to values ​​from start number to end number, incrementing by specified step, and execute the specified statements";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add Condition";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final condition";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, delete or reorder";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "otherwise";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "if not";
Blockly.Msg.CONTROLS_IF_MSG_IF = "if";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then execute some orders";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then execute the first block of orders, otherwise execute the second block of orders";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then execute the first block of orders, otherwise, if the second value is true, execute the second block of orders";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then execute the first block of orders, otherwise, if the second value is true, execute the second block of orders.If none of the values ​​are true, execute the last block of orders ";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeat% 1 time";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Run statements multiple times";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat up";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat as long as";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "As long as a value is false, then execute instructions";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "As long as a value is true, then execute instructions";
Blockly.Msg.DELETE_ALL_BLOCKS = "Delete these% 1